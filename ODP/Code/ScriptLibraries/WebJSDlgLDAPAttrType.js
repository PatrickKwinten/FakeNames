/*	Javascript for the LDAP attribute select dialog (LDAPAttributeTypeListWeb form)*/var sMsgNoAttribSelected	= 'One or more attribute types must be selected.'var sMsgOneAttribIsReq	= 'You must choose at least one queriable LDAP attribute.'var hDlg			= null					// dialogbox objectfunction onLoadBody() {	// called in the onload event of the dialogbox	initTools()		hDlg = new cLDAPDialog()}function cLDAPDialog() {	this.sUID				= 'sObjUID' + (window.iObj++)	this.sObject 			= 'window.aObj.' + this.sUID	window.aObj[this.sUID]	= this	// load all LDAP attribute types - this may take a while, or a bit longer	this.hTransfer = new cTransfer(window, 'get')	this.hTransfer.transEventOnLoad = this.sObject + '.initDialog'	this.hTransfer.transGetData(sWebDbName + 'wReadData?Openagent&ReqId=LDAPObjectClasses')}cLDAPDialog.prototype.initDialog = function(hWinData) {	dlgCheckOpener()		this.hFormOpener = window.opener.document.forms[0]		// attach loaded data to this object	this.getData = hWinData.getData	this.getData()	// get handle to layers	this.hLyrWaitMsg	= lyrGetById(document, 'lyrWaitMessage')	this.hLyrDlg		= lyrGetById(document, 'lyrDialogbox')		// get browser specific handles	if (isNN4) {		var hForm		= this.hLyrDlg.document.forms[0]	} else {		var hForm		= document.forms['Dialogbox']	}		// get dialog elements	this.hLboxClasses	= hForm['selObjClassList']	this.hLboxSrc		= hForm['selListSrc']	this.hLboxDest		= hForm['selListDest']		// init dialogboxes	lboxCreateFromArray(this.hLboxClasses,	this.aClasses, true, null)	lboxCreateFromArray(this.hLboxSrc,		this.aClasses[0][2].sort(sortArrayNoCase), true)	lboxCreateFromArray(this.hLboxDest,	this.hFormOpener.LDAPATACL.value.split(', '), true)		// hide loading, show dialog	lyrShow(this.hLyrWaitMsg, false)	lyrShow(this.hLyrDlg, true)}cLDAPDialog.prototype.onChangeClassList = function() {	// called when a new class was selected		dlgCheckOpener()	lboxCreateFromArray(		this.hLboxSrc,			this.aClasses[this.hLboxClasses.selectedIndex][2].sort(sortArrayNoCase), true)}cLDAPDialog.prototype.onClickAdd = function() {	// called when clicked on the add button		dlgCheckOpener()	var aSrc = lboxGetSelectedItems(this.hLboxSrc)		if (aSrc.length == 0) {		alert(sMsgNoAttribSelected)		return	}		var aNewDest = arrMakeUnique(aSrc, lboxGetAllItems(this.hLboxDest), true)	lboxCreateFromArray(this.hLboxDest, aNewDest, true)	}cLDAPDialog.prototype.onClickAddAll = function() {	// called when clicked on the add all button		dlgCheckOpener()	var aNewDest = arrMakeUnique(					lboxGetAllItems(this.hLboxSrc), 					lboxGetAllItems(this.hLboxDest), true)	lboxCreateFromArray(this.hLboxDest, aNewDest, true)	}cLDAPDialog.prototype.onClickRemove = function() {	// called when clicked on the remove button		dlgCheckOpener()	var aDest = lboxGetSelectedItems(this.hLboxDest)		if (aDest.length == 0) {		alert(sMsgNoAttribSelected)		return	}		lboxRemoveAllSelected(this.hLboxDest)}cLDAPDialog.prototype.onClickRemoveAll = function() {	// called when clicked on the remove all button			dlgCheckOpener()	lboxRemoveAll(this.hLboxDest)}cLDAPDialog.prototype.onClickDefault = function() {	// called when clicked on the 'Use Default Values' button		lboxCreateFromArray(this.hLboxDest, 		document.forms['DominoFields'].DefaultAttr.value.split(', ').sort(sortArrayNoCase), true)}cLDAPDialog.prototype.onClickOK = function() {	// called when clicked on the OK button			dlgCheckOpener()	var aDest = lboxGetAllItems(this.hLboxDest)		if (aDest.length == 0) {		alert(sMsgOneAttribIsReq)		return	}		window.opener.updateLDAPAttributes(aDest)	window.close()}