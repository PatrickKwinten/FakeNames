/*	Javascript for generic listbox dialog*/var sMsgOneDestIsReq	= 'You must choose at least one %s1'var sMsgNotSelected		= 'No %s1 is selected'var hDlg		= null					// dialogbox object// reference to opener dialog box objectvar sDlgCtx	= strUrlParam(window.location.href, 'DlgOpenerRef')var hDlgCtx	= eval('window.opener.' + sDlgCtx)	function onLoadBody() {	// called in the onload event of the dialogbox	hDlg = new cListbox()	hDlgCtx.hDlgOpened = hDlg	// put a reference from this listbox into the opener dlg object}function cListbox() {	this.sUID		= 'sObjUID' + (window.iObj++)	this.sObject 	= 'window.aObj.' + this.sUID	window.aObj[this.sUID] = this		this.hWin		= window	this.aSrcList	= []	this.aDestList	= []		if (window.hDlgCtx.sSrcDataUrl) {		// load data for the source list from the server		this.hTransfer = new cTransfer(window, 'get')		this.hTransfer.transEventOnLoad = this.sObject + '.initDialog'		this.hTransfer.transGetData(window.hDlgCtx.sSrcDataUrl)		} else {		this.initDialog	}}cListbox.prototype.initDialog = function(hWinData) {	dlgCheckOpener()		this.hFormOpener = window.opener.document.forms[0]		if (hWinData) {		// attach loaded data to this object - this.aSrcList will be set		this.getData = hWinData.getData		this.getData()				if (window.hDlgCtx.lbEventOnDataLoaded) {			window.hDlgCtx.lbEventOnDataLoaded()		}	}		// get handle to layers	this.hLyrWaitMsg	= lyrGetById(document, 'lyrWaitMessage')	this.hLyrDlg		= lyrGetById(document, 'lyrDialogbox')		// get browser specific handles	if (isNN4) {		var hForm		= this.hLyrDlg.document.forms[0]	} else {		var hForm		= document.forms['Dialogbox']	}		// get dialog elements	this.hLboxSrc		= hForm['selListSrc']	this.hLboxDest		= hForm['selListDest']	// setup source listbox	lboxCreateFromArray(this.hLboxSrc,		this.aSrcList, true)	// setup destination listbox	var aDest = []	if (window.hDlgCtx.isDestTxArea) {		var sDest = window.hDlgCtx.hDestField.value		if (sDest == '') {			aDest	= []		} else {			aDest	= sDest.split(/\r\n/g)		}	}	if (this.aDestList) {		aDest = this.aDestList	}		if (this.hLboxDest) {		lboxCreateFromArray(this.hLboxDest, aDest, true)	}		// hide loading, show dialog	lyrShow(this.hLyrWaitMsg, false)	lyrShow(this.hLyrDlg, true)}cListbox.prototype.onClickAdd = function() {	// called when clicked on the add button		dlgCheckOpener()	var aSrc = lboxGetSelectedItems(this.hLboxSrc)		if (aSrc.length == 0) {		alert(strPrintf(sMsgNotSelected, window.hDlgCtx.sMsgOneEntry))		return	}		var aNewDest = arrMakeUnique(aSrc, lboxGetAllItems(this.hLboxDest), true)	lboxCreateFromArray(this.hLboxDest, aNewDest, true)	}cListbox.prototype.onClickAddAll = function() {	// called when clicked on the add all button		dlgCheckOpener()	var aNewDest = arrMakeUnique(					lboxGetAllItems(this.hLboxSrc), 					lboxGetAllItems(this.hLboxDest), true)	lboxCreateFromArray(this.hLboxDest, aNewDest, true)	}cListbox.prototype.onClickRemove = function() {	// called when clicked on the remove button		dlgCheckOpener()	var aDest = lboxGetSelectedItems(this.hLboxDest)		if (aDest.length == 0) {		alert(strPrintf(sMsgNotSelected, window.hDlgCtx.sMsgOneEntry))		return	}		lboxRemoveAllSelected(this.hLboxDest)}cListbox.prototype.onClickRemoveAll = function() {	// called when clicked on the remove all button			dlgCheckOpener()	lboxRemoveAll(this.hLboxDest)}cListbox.prototype.onClickOK = function() {	// called when clicked on the OK button			dlgCheckOpener()	if (window.hDlgCtx.lbEventOnSave) {		// use custom save event				window.hDlgCtx.lbEventOnSave()			} else {			// no custom save event				if (this.hLboxDest) {			var aDest = lboxGetAllItemsText(this.hLboxDest)		} else {			var aDest = [lboxGetSelectedText(this.hLboxSrc)]		}				// check if required entries are set		if (aDest.length < window.hDlgCtx.iDestMinEntries) {			alert(strPrintf(sMsgOneDestIsReq, window.hDlgCtx.sMsgOneEntry))			return		}				// write data back into field in opener window		window.hDlgCtx.dlSaveDestination(aDest)				window.close()	}}