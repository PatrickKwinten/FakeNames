/*	Javascript for the file protection dialog*/var res = []res['ERR_OneEntryRequired']	= 'You must have at least one entry in the access control list.'res['ERR_NameIsEmpty']		= 'Name cannot be empty.'res['LBL_NoAccess']			= 'No Access'res['LBL_GET']				= 'GET'res['LBL_POSTandGET']		= 'POST and GET'// ACL access rightsvar aACLLevel	= []aACLLevel['0']					= res['LBL_NoAccess']aACLLevel['1']					= res['LBL_GET']aACLLevel['2']					= res['LBL_POSTandGET']aACLLevel[res['LBL_NoAccess']]	= '0'aACLLevel[res['LBL_GET']]		= '1'aACLLevel[res['LBL_POSTandGET']]	= '2'var hDlgAddrSingle		= new cDlgListbox('AddressSingle')var hDlg				= nullfunction onLoadBody() {	// called in the onload event of the dialogbox	hDlg = new cDlg()}function cDlg() {	// get dialog elements	var hForm = window.document.forms[0]		this.hLboxACL			= hForm['selACL']	this.hInpName			= hForm['inpName']	this.aRdoAccess		= hForm['rdoAccess']		// convert parameters from opener doc into array	var aParams = window.opener.document.forms[0].Parameters.value.split (', ')		lboxCreateFromArray(this.hLboxACL, aParams, true)}cDlg.prototype.onChangeACL = function() {	// called when an entry was selected/deselected in the ACL listbox		var sEntry = lboxGetSelectedValue(this.hLboxACL)		// split listbox entry into components	if (sEntry == null) {		// nothing is selected		var sName 	=''		var sAccess	= '1'	} else {		// an entry is selected		var aEntry = sEntry.split(' -(')				var sName		= aEntry[0]		var sAccess	= aACLLevel[aEntry[1].split(')')[0]]	}	// display the components	this.hInpName.value = sName	cboxSetCheckedFromArray(this.aRdoAccess, [sAccess])}cDlg.prototype.onClickAdd = function() {	// called when clicked on the Add/Update button		var sName		= this.hInpName.value	var sNameLower	= sName.toLowerCase()		// check for valid name	if (strTrim(sName) == '' ) {		alert(res['ERR_NameIsEmpty'])		this.hInpName.focus()		return	}			var aACL		= lboxGetAllItemsText(this.hLboxACL)	var iNameIdx	= null		// search current name in ACL list	for (var iACL = 0; iACL < aACL.length; iACL++) {		if (aACL[iACL].toLowerCase().split(' -(')[0] == sNameLower) {			iNameIdx = iACL			break		}	}	// get current access level as string	var sAccess = aACLLevel[cboxGetCheckedValues(this.aRdoAccess)[0]]	sName += ' -(' + sAccess + ')'		// update ACL list	if (iNameIdx == null) {		// name was not found, create new		aACL[aACL.length] = sName		aACL.sort(sortArrayNoCase)		lboxCreateFromArray(this.hLboxACL, aACL, true)		this.onChangeACL()		this.hInpName.focus()	} else {		// name was found, update it		this.hLboxACL.options[iNameIdx].text = sName	}}cDlg.prototype.onClickRemove = function() {	// called when clicked on the Remove button	var iLastIdx = this.hLboxACL.selectedIndex		lboxRemoveAllSelected(this.hLboxACL)		if (this.hLboxACL.length > 0) {		// reselect entry in listbox		if (iLastIdx > 0) {			if (iLastIdx >= this.hLboxACL.length) {				iLastIdx = this.hLboxACL.length - 1			}		}		this.hLboxACL.selectedIndex = iLastIdx	}	this.onChangeACL()}cDlg.prototype.onClickOK = function() {	var aACL = lboxGetAllItemsText(this.hLboxACL)	if (aACL.length == 0) {		alert(res['ERR_OneEntryRequired'])		return	}		window.opener.document.forms[0].elements['$dspSetParamFromWeb'].value = aACL.join('~')		// update the file protection doc	window.opener._doClick('$Refresh', window.opener, null)}