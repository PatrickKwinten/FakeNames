/*	Javascript for the server config (ini parameter) dialog*/var sMsg01		= 'A server parameter is not selected';var sMsg02		= 'This server parameter is already set';var sMsg03		= ' - parameter removed - ';var sMsg04		= 'Server parameters are not available';var sLbl01		= 'Add...'				// button labelsvar sLbl02		= 'Change..'var hDlg			= null;					// dialogbox objectvar sCustomParam	= '$$CustomParameter';function onLoadBody() {	// called in the onload event of the dialogbox	initTools();	hDlg = new cParamDlg();}function cParamDlg() {		this.sUID				= 'sObjUID' + (window.iObj++)	this.sObject 			= 'window.aObj.' + this.sUID	window.aObj[this.sUID]	= this	// load all notes.ini parameter	this.hTransfer = new cTransfer(window, 'get')	this.hTransfer.transEventOnLoad = this.sObject + '.initDialog'	this.hTransfer.transGetData(sWebDbName + 'wReadData?Openagent&ReqId=ServerParameter')}cParamDlg.prototype.initDialog = function(hWinData) {	dlgCheckOpener()	// attach loaded data to this object	this.getData = hWinData.getData	this.getData()	this.aParams			= [];	this.sLastParamName		= '';	this.sLastParamValue	= '';		this.hCurrentParam		= null;		// selected parameter in current param listbox	this.hCurrIdx			= null;		// index in current parameter array/listbox	this.sInfoWidth		= '280';		// width of the info text		// get handle to layers	this.hLyrDlg		= lyrGetById(document, 'lyrDialogbox');	this.hLyrWaitMsg	= lyrGetById(document, 'lyrWaitMessage')		// get browser specific handles	if (isNN4) {		var hForm		= this.hLyrDlg.document.forms[0]				this.hLyrInfo	= lyrGetById(this.hLyrDlg.document, 'lyrInfo');		this.hLyrInfo	= lyrCreateAbsFromRel(this.hLyrInfo);			} else {		var hForm		= document.forms['Dialogbox']		this.hLyrInfo	= lyrGetById(document, 'lyrInfo');	}		// get dialog elements	this.hLboxCurrParams	= hForm['selCurrParams'];	this.hLboxNewParams		= hForm['selNewParams'];	this.hInpItem			= hForm['inpItem'];	this.hInpValue			= hForm['inpValue'];	// populate listbox if there are entries	if (this.aAllParams.length > 0) {		lboxCreateFromArray(this.hLboxNewParams, this.aAllParams, true)	} else {		// parameters are not available		alert(sMsg04)	}	// get handle to input field(s) containing the ini parameter in opener doc	var hInpIniInConf	= window.opener.document.forms[0].Parameters;	// convert ini parameters from the opener doc into an array	if (hInpIniInConf.length) {		// there are multiple <input> fields				for (var iInput = 0; iInput < hInpIniInConf.length; iInput++) {			var aEntry			= hInpIniInConf[iInput].value.split('=');			this.aParams[iInput]	= [hInpIniInConf[iInput].value, aEntry[0], aEntry[1]];		}	} else {		// there is only one <input> field		if (hInpIniInConf.value != '') {			var aEntry			= hInpIniInConf.value.split('=');			this.aParams[0]		= [hInpIniInConf.value, aEntry[0], aEntry[1]];		}	}	// populate listbox if there are entries	if (this.aParams.length > 0) {		lboxCreateFromArray(this.hLboxCurrParams, this.aParams, true)	}		// hide loading, show dialog	lyrShow(this.hLyrWaitMsg, false)	lyrShow(this.hLyrDlg, true)	this.hLboxCurrParams.focus()}// ---------------------------------------- EVENTS ------------------------------------------cParamDlg.prototype.onClickOK = function() {	dlgCheckOpener()	// update current parameter	this.onSelectParam()	// prepare data which are set in the config document	var sData = ''		// loop: all parameters - join into one string	for (var iPara = 0; iPara < this.aParams.length; iPara++) {			sData += '~' + this.aParams[iPara][0]	}	if (sData == '') {		sData = '$$DeleteAllEntries'	} else {		sData = this.sLastParamName + '~' + this.sLastParamValue + sData	}		window.opener.updateParameters(sData)	window.close()	}cParamDlg.prototype.onClickUpdate = function() {	// called when clicked on update button		dlgCheckOpener();		// update and show current parameter	this.onSelectParam();}cParamDlg.prototype.onClickAdd = function() {	// called when clicked on the add button	dlgCheckOpener();		// return if there are no selected parameters	if (this.hLboxNewParams.selectedIndex == -1) {		alert(sMsg01);		return;	}	// save data for current parameter	this.saveCurrentParam();	// get selected new parameter	var hNewParam = this.aAllParams[this.hLboxNewParams.selectedIndex];	var sNewParam = hNewParam[0];		// check if this is a duplicate entry	for (var iPara = 0; iPara < this.aParams.length; iPara++) {			if (this.aParams[iPara][1].toUpperCase() == sNewParam.toUpperCase()) {			alert(sMsg02);			return;		}	}		// add to internal structure	var sParamInLbox 		= hNewParam[1] + '=' + hNewParam[2];	this.sLastParamName		= hNewParam[1];	this.sLastParamValue	= hNewParam[2];		this.aParams[this.aParams.length] = [sParamInLbox, hNewParam[1], hNewParam[2]];		this.aParams.sort(sort2DArrayNoCaseOn1);		// show/select in listbox	lboxCreateFromArray(this.hLboxCurrParams, this.aParams, true);	lboxSelectByValue(this.hLboxCurrParams, hNewParam[1]);	// simulate selection of added parameter	this.hCurrentParam = null;	this.onSelectParam();}cParamDlg.prototype.onClickRemove = function() {	// called when the remove button was hit		dlgCheckOpener();		var hParam = this.hCurrentParam;		// return if there are no selected parameters	if (hParam == null) {		alert(sMsg01);		return;	}	// save last param change	this.sLastParamName		= this.hCurrentParam[1];	this.sLastParamValue	= sMsg03;	// remove from internal structure		var iSelIdx	= this.hLboxCurrParams.selectedIndex;	this.hCurrIdx	= null;	this.aParams	= arrRemoveEntryByIndex(this.aParams, iSelIdx);	// remove from the listbox	var iNextItem = lboxRemoveSelectedEntry(this.hLboxCurrParams, true);	if (iNextItem == -1) {		// listbox is empty				this.hCurrentParam		= null;				// clear input fields		this.hInpItem.value		= '';		this.hInpValue.value	= '';			// clear para info		lyrWriteLabel(this.hLyrInfo, '');	} else {		// init next selected entry				this.hCurrentParam		= this.aParams[iNextItem];				// show parameter for selected entry		this.onSelectParam();	}}cParamDlg.prototype.onSelectParam = function() {	// called when a new parameter was selected	dlgCheckOpener();		// save data for current parameter	this.saveCurrentParam();		// set new current parameter	this.hCurrIdx			= this.hLboxCurrParams.selectedIndex;	if (this.hCurrIdx == -1) {		// nothing is selected in the listbox		this.hCurrIdx = null;	} else {		// parameter is selected		var hParam			= this.aParams[this.hCurrIdx];		var sParam			= hParam[1];		this.hCurrentParam		= hParam;				// show item/value of new selected parameter		this.hInpItem.value		= sParam;		this.hInpValue.value	= hParam[2];			this.showParamInfo(sParam);	}}cParamDlg.prototype.onSelectNewParam = function() {	// new parameter was selected in listbox		dlgCheckOpener();		var iIdxNew = this.hLboxNewParams.selectedIndex;	// display info about selected parameter		if (iIdxNew != -1) {		this.showParamInfo(this.aAllParams[iIdxNew][1]);	}}// ---------------------------------------- TOOLS -------------------------------------------------cParamDlg.prototype.saveCurrentParam = function() {	// save current values in internal structure	var hParam = this.hCurrentParam;		if (hParam && (this.hCurrIdx != null)) {		// if the parameter has changed, this parameter becomes the last changed param		if (this.hInpItem.value != hParam[1] || this.hInpValue.value != hParam[2]) {			this.sLastParamName		= this.hInpItem.value;			this.sLastParamValue	= this.hInpValue.value;		}		hParam[1]	= this.hInpItem.value;		hParam[2]	= this.hInpValue.value;		hParam[0]	= hParam[1] + '=' + hParam[2];				this.hLboxCurrParams[this.hCurrIdx].text  = hParam[0];		this.hLboxCurrParams[this.hCurrIdx].value = hParam[1];	}}cParamDlg.prototype.showParamInfo = function(sParam) {	// get info for a parameter and display it		var hAllParam	= null;	sParam		= sParam.toUpperCase();		for (iPara = 0; iPara < this.aAllParams.length; iPara++) {				if (this.aAllParams[iPara][1].toUpperCase() == sParam) {			hAllParam = this.aAllParams[iPara];			break;		}	}		// check if info is valid	if (hAllParam) {		var sInfo = hAllParam[3];				if (sInfo == sCustomParam) {			sInfo = '';		}			} else {		var sInfo = '';	}	lyrWriteLabel(this.hLyrInfo, sInfo, this.sInfoWidth);}