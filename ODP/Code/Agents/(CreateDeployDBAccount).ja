<?xml version='1.0' encoding='utf-8'?>
<agent name='(CreateDeployDBAccount)' xmlns='http://www.lotus.com/dxl' version='9.0'
 maintenanceversion='1.5' replicaid='C1257E4300352F3F' hide='v3' publicaccess='false'
 designerversion='8' restrictions='unrestricted'>
<noteinfo noteid='886' unid='0CC4C29016E04997052576D2005760B9' sequence='55'>
<created><datetime>20100222T105423,93-05</datetime></created>
<modified><datetime dst='true'>20150512T114103,98+02</datetime></modified>
<revised><datetime dst='true'>20130909T095408,92-04</datetime></revised>
<lastaccessed><datetime dst='true'>20150512T114103,98+02</datetime></lastaccessed>
<addedtofile><datetime dst='true'>20150512T114103,98+02</datetime></addedtofile></noteinfo>
<updatedby><name>CN=Lotus Notes Template Development/O=Lotus Notes</name></updatedby>
<wassignedby><name>CN=Lotus Notes Template Development/O=Lotus Notes</name></wassignedby>
<designchange><datetime dst='true'>20130909T095359,33-04</datetime></designchange>
<trigger type='agentlist'/>
<documentset type='selected'/><code event='action'><javaproject class='JavaAgent.class'
 codepath='C:\Program Files\IBM\Lotus\Notes\Data'><java name='JavaAgent.java'>import java.io.File;
import java.io.FileFilter;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.cert.CertificateException;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;
import java.util.Date;
import java.util.Vector;

import lotus.domino.ACL;
import lotus.domino.AgentBase;
import lotus.domino.AgentContext;
import lotus.domino.Database;
import lotus.domino.DateTime;
import lotus.domino.DbDirectory;  
import lotus.domino.Document;
import lotus.domino.DocumentCollection;
import lotus.domino.Item;
import lotus.domino.NoteCollection;
import lotus.domino.NotesError;
import lotus.domino.NotesException;
import lotus.domino.Session;

public class JavaAgent extends AgentBase {

	public static final String LOCAL = "";
	public static final String DEPLOY = "deploy.nsf";
	public static final String EXTRAS_DIR = "extras";
	public static final String PERNAMES = "pernames.ntf";
	public static final String FORM = "Form";
	public static final String ACCOUNT = "Account";
	public static final String DEPLOY_TITLE = "Deploy DB";
	public static final String DEPLOY_PROFILE_NOTE = "deployProfileNote";
	public static final String ACCOUNT_LINK_IDS = "$AccountLinkIds";
	public static final String TMP_DEPLOY_DB_DIR = "TempDeployDBDir";
	public static final String TMP_DEPLOY_DB_DELETES = "TempDeployDelete";
	public static final String FORCE_DELETES = "ForceDeletes";
	public static final String DT_ACCOUNT_UPDATE = "$dtAccountUpdate";
	public static final String SERVER_COPY_MOD_TIME = "ServerCopyModTime";
	public static final String SERVER_COPY_UNID = "ServerCopyUnid";
	public static final String DEFAULT_ACL = "-Default-";
	public static final String ACCOUNTS_VIEW = "Accounts";
	public static final String COMP_APP_FIELD = "$TITLE";
	public static final String COMP_APP_XML = "Notes Contacts Application.xml";
	public static final String TYPE = "Type";
	public static final String FD_TRUE = "1";
	public static final String FD_FALSE = "0";
	public static final String LS = System.getProperty("line.separator");

	private Vector uidList;
	private String directory;
	private String forceDeletes;
	private boolean acctsCopied = false;
	private StringBuffer logBuffer;

	/**
	 * This agent is designed to be run by the Export Accounts to Deploy
	 * Database view action. This should not be run on its own, as it depends on
	 * a Notes.ini setting set by the view action. This agent creates the
	 * deploy.nsf database which contains a list of accounts that are added
	 * to the user's PNAB at install time. 
	 */
	public void NotesMain() {

		logBuffer = new StringBuffer();
		try {
			
			
			Session session = getSession();

			// Get the Force Deletes setting from notes.ini
			forceDeletes = session.getEnvironmentString(TMP_DEPLOY_DB_DELETES);
			if (forceDeletes == null
					|| (!forceDeletes.equals(FD_FALSE) &amp;&amp; !forceDeletes.equals(FD_TRUE))) {
				forceDeletes = FD_FALSE;
				session.setEnvironmentVar(TMP_DEPLOY_DB_DELETES, LOCAL);
			}

			// Get the directory that contains the deploy.nsf
			// file from notes.ini
			// If it does not exist, a new one will be created.
			directory = session.getEnvironmentString(TMP_DEPLOY_DB_DIR);
			if (directory == null || !(new File(directory)).canWrite()) {
				logBuffer.append("Working directory either does not exist or is not writeable." + LS);
				throw new NotesException(NotesError.NOTES_ERR_SYS_FILE_NOT_FOUND, logBuffer.toString());
			} else {
				session.setEnvironmentVar(TMP_DEPLOY_DB_DIR, LOCAL);
			}
			
			AgentContext agentContext = session.getAgentContext();

			DocumentCollection docs = agentContext.getUnprocessedDocuments();
			if(docs != null &amp;&amp; docs.getCount()==0) {
				logBuffer.append("No documents selected, or only categories selected." + LS);
				throw new NotesException(NotesError.NOTES_ERR_DOCUMENTCOLLECTION_MISSING, logBuffer.toString());
			}
			Document doc = null;
			String form = null;
			String certType = null;
			String type = null;

			// Ensure each document is an account
			// and if not delete them from the collection
			for (int i = 1; i &lt;= docs.getCount(); i++) {
				doc = docs.getNthDocument(i);
				form = doc.getItemValueString(FORM);
					if (form.equals(ACCOUNT))
			 {
						acctsCopied = true;
				} else {
					docs.deleteDocument(doc);
					i--;
				}
			}

			// The docs document collection contains at least one valid document
			if (acctsCopied) {

				// Get the existing deploy.nsf database, or create one if
				// it does not already exist
				DbDirectory localDbDirectory = session.getDbDirectory(LOCAL);
				Database deploy = null;
				boolean newDatabase = false;
				try {
					deploy = localDbDirectory.openDatabase(directory
							+ EXTRAS_DIR + File.separator + DEPLOY);
				} catch (NotesException ne) {
					// Deploy database does not exist, create it.
					newDatabase = true;
					Database pernames = localDbDirectory.openDatabase(PERNAMES,
							false);
					deploy = pernames.createFromTemplate(LOCAL, directory
							+ EXTRAS_DIR + File.separator + DEPLOY, false);
					deploy.setTitle(DEPLOY_TITLE);
					deploy.grantAccess(DEFAULT_ACL, ACL.LEVEL_READER);
				}

				if (newDatabase) {
					removeCompApp(deploy);
				}

				// Remove all accounts from the database
				deploy.getView(ACCOUNTS_VIEW).getAllEntries().removeAll(
						true);

				uidList = new Vector();
				
				for (int i = 1; i &lt;= docs.getCount(); i++) {
					if(docs.getNthDocument(i)!= null) {
						copyToDatabase(deploy, docs.getNthDocument(i));
					}
				}

				// Create a profile document that will contain a list
				// of unids for all the account documents, the time
				// the database was last updated and the force deletes setting
				Document profile = deploy.getProfileDocument(
						DEPLOY_PROFILE_NOTE, null);
				

				// Add the UNID of each document
				Item trustLinkIds = profile.replaceItemValue(ACCOUNT_LINK_IDS,
						null);
				trustLinkIds.setValues(uidList);
				// Add today's time/date so we know when this was last modified.
				Item dateTimeItem = profile.replaceItemValue(DT_ACCOUNT_UPDATE,
						null);
				dateTimeItem.setDateTimeValue(session
						.createDateTime(new Date()));
				// Add the forcedeletes value
				profile.replaceItemValue(FORCE_DELETES, (new Integer(forceDeletes)));
				profile.save(true);

						} else {
				// No valid accounts were selected in the view
				logBuffer.append("No valid accounts were selected.  Deploy.nsf not created or modified." + LS);
			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			System.err.println(logBuffer.toString());
		}
	}

	/**
	 * Copies the document to the deploy database. Adds the copied documents
	 * UNID to the list of UNIDS Writes the server copy UNID and Modified Date
	 * to the copied document.
	 * 
	 * @param database
	 *            The deploy database
	 * @param doc
	 *            The document to copy
	 * @throws NotesException
	 */
	private void copyToDatabase(Database database, Document doc)
			throws NotesException {
		String unid = doc.getUniversalID();
		DateTime date = doc.getLastModified();
		Document newDoc = doc.copyToDatabase(database);
		uidList.add(newDoc.getUniversalID());
		newDoc.replaceItemValue(SERVER_COPY_UNID, unid);
		newDoc.replaceItemValue(SERVER_COPY_MOD_TIME, date);
		newDoc.save();
	}

	
	private void removeCompApp(Database db) {
		try {
			NoteCollection nc = db.createNoteCollection(false);
			nc.setSelectMiscFormatElements(true);
			nc.buildCollection();
			String noteId = nc.getFirstNoteID();
			Document colDoc = null;
			while (noteId.length() &gt; 0) {
				colDoc = db.getDocumentByID(noteId);
				if (colDoc.getItemValueString(COMP_APP_FIELD).equals(
						COMP_APP_XML)) {
					colDoc.remove(true);
					break;
				}
				noteId = nc.getNextNoteID(noteId);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

}</java></javaproject></code>
<rundata processeddocs='0' exitcode='0' agentdata='FB29240746200864852576C10074089E'>
<agentmodified><datetime>20100205T160630,06-05</datetime></agentmodified>
<agentrun><datetime>20100209T115334,18-05</datetime></agentrun>
<runlog>Started running agent 'CreateDeployDBAccount' on 02/09/2010 11:53:33 AM
Running on selected documents: 1 total
Found 1 document(s) that match search criteria
Ran Java Agent Class
Done running agent 'CreateDeployDBAccount' on 02/09/2010 11:53:34 AM
</runlog></rundata>
<item name='JavaCompilerSource' sign='true'><text>1.3</text></item>
<item name='JavaCompilerTarget' sign='true'><text>1.2</text></item>
<item name='$POID'><datetime dst='true'>20130909T095408,92-04</datetime></item></agent>

