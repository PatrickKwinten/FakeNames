<?xml version='1.0' encoding='utf-8'?>
<agent name='(wReadAddressData) ' alias=' wReadAddressData' xmlns='http://www.lotus.com/dxl'
 version='9.0' maintenanceversion='1.5' replicaid='C1257E4300352F3F' hide='v3'
 runaswebuser='true' publicaccess='false' designerversion='6' restrictions='unrestricted'>
<noteinfo noteid='176' unid='8CC1442CEAB270B0C1256BAB0025CB82' sequence='5061'>
<created><datetime dst='true'>20020430T085249,30+02</datetime></created>
<modified><datetime dst='true'>20150512T114055,56+02</datetime></modified>
<revised><datetime dst='true'>20130909T095407,54-04</datetime></revised>
<lastaccessed><datetime dst='true'>20150512T114055,56+02</datetime></lastaccessed>
<addedtofile><datetime dst='true'>20150512T114055,56+02</datetime></addedtofile></noteinfo>
<updatedby><name>CN=Lotus Notes Template Development/O=Lotus Notes</name></updatedby>
<revisions><datetime>20100304T143918,43-05</datetime></revisions>
<wassignedby><name>CN=Lotus Notes Template Development/O=Lotus Notes</name></wassignedby>
<designchange><datetime dst='true'>20130909T095358,75-04</datetime></designchange>
<trigger type='agentlist'/>
<documentset type='runonce'/><code event='options'><lotusscript>%REM

	returns data for the address dialog to the browser

%END REM

Option Public
Option Declare
Option Base 0

Use "WebLSClassTransfer"


</lotusscript></code><code event='declarations'><lotusscript>
Private Type TypeListEntry
	sText	As String
	sAlias	As String
	sIcon	As String
End Type

Private Class cReadAddress As cTransfer
	
	m_sNaviType		As String
	m_sNaviStartPos	As String
	m_sNaviKey		As String
	m_sNaviDirection	As String
	m_sMaxReturn		As String
	
	Sub new(sTransferType As String)
		
		On Error Goto ERROR_HANDLER
		
		Dim isInJsFkt	As Boolean
		
		m_sNaviType		= UtilGetQueryParameter(Me.m_sQueryString, "NaviType=")
		m_sNaviStartPos	= UtilGetQueryParameter(Me.m_sQueryString, "NaviPos=")
		m_sNaviKey		= UtilGetQueryParameter(Me.m_sQueryString, "NaviKey=")
		m_sNaviDirection	= UtilGetQueryParameter(Me.m_sQueryString, "NaviDirection=")
		m_sMaxReturn		= UtilGetQueryParameter(Me.m_sQueryString, "Count=")
		
		Print _
		|
			function getData() {

				this.aDirList	= []
				this.aIconList	= []
		|
		
		isInJsFkt = True
		
		Call Navigate
		
		Print _
		|
			}
		|
		
		Exit Sub
		
ERROR_HANDLER:
		
		If isInJsFkt Then Print |}|
		
		m_sError = Getthreadinfo(LSI_THREAD_PROC) &amp; " (" &amp; Cstr(Erl) &amp; ") " &amp; Error
		Exit Sub
	End Sub
	
	
	'------
	Sub Navigate()
	'------
		
		On Error Goto ERROR_HANDLER
		
		Dim ndb			As NotesDatabase
		Dim vwDir			As NotesView
		Dim vwnavDir		As NotesViewNavigator
		Dim vwcolDir		As NotesViewEntryCollection
		Dim vweDir		As NotesViewEntry
		Dim nmUser		As NotesName
		
		Dim iIdx			As Integer
		Dim iMaxReturn		As Integer
		
		Dim isCollection	As Boolean
		Dim iKeyFound		As Integer
		
		Dim sFirstPos		As String
		Dim sLastPos		As String
		Dim vValue		As Variant
		
		Dim liItems		List As TypeListEntry
		Dim iLiStart		As Integer
		Dim iLiEnd		As Integer
		Dim iLiPos		As Integer
		Dim iItemCount		As Integer
		Dim sLiPos		As String
		
		Set ndb		= m_ndb
		Set vwDir		= ndb.GetView("($PeopleGroupsFlat)")	
		Set vwnavDir	= vwDir.CreateViewNav
		
		'get max return entries, set default if not set
		iMaxReturn = 25		
		If m_sMaxReturn &lt;&gt; "" Then
			iMaxReturn = Cint(m_sMaxReturn)
		End If
		
		'search or navigate
		If m_sNaviType = "Key" Then
			
			'search with a key
			
			'get collection with/without key
			If m_sNaviKey = "" Then
				'no key defined
				Set vwcolDir	= vwDir.AllEntries
			Else
				'search with key
				
				'loop: reduce key by one char after each search until empty
				Do While m_sNaviKey &lt;&gt; ""
					
					Set vwcolDir	= vwDir.GetAllEntriesByKey(m_sNaviKey, False)
					
					If Not vwcolDir Is Nothing Then
						If vwcolDir.count &gt; 0 Then
							iKeyFound = 1
							Exit Do
						End If
					End If
					
					'set new search  key
					m_sNaviKey = Left$(m_sNaviKey, Len(m_sNaviKey) - 1)
				Loop
				
				
			End If
			
			'retrieve data if there are any
			If Not vwcolDir Is Nothing Then
				
				Set vweDir	= vwcolDir.GetFirstEntry
				
				isCollection = True
				Gosub AddEntries
				
				'check if max result is not reached, if not append additional entries 
				'by walking in the same direction
				If (m_sNaviKey &lt;&gt; "") And (sLastPos &lt;&gt; "") And (iItemCount &lt; iMaxReturn) Then
					Set vweDir		= vwnavDir.GetPos(sLastPos, ".")
					
					If Not vweDir Is Nothing Then
						Set vweDir = vwnavDir.GetNext(vweDir)
						
						isCollection = False
						Gosub AddEntries
					End If
				End If
			End If
			
		Elseif m_sNaviType = "Pos" Then
			
			'navigate
			
			If m_sNaviDirection = "Begin"  Or m_sNaviDirection = "" Then
				
				'navigate towards the begin of the view
				
				If m_sNaviStartPos = "" Then
					'no start position defined, start from the beginning of the view
					Set vweDir = vwnavDir.GetFirst
					m_sNaviDirection = "End"				'reverse direction
				Else
					'try to go to the given position
					Set vweDir = vwnavDir.GetPos(m_sNaviStartPos, ".")
					
					If vweDir Is Nothing Then
						'last pos was not found, start from top
						Set vweDir = vwnavDir.GetFirst
						m_sNaviDirection = "End"			'reverse direction
					Else
						'last pos found, m_sNaviStartPos represents the position of 
						'the previous navigation, skip this one
						Set vweDir = vwnavDir.GetPrev(vweDir)
						
						If vweDir Is Nothing Then
							'if we skiped ahead of the top, retrieve the topmost entries
							Set vweDir = vwnavDir.GetFirst
							m_sNaviDirection = "End"		'reverse direction
						End If
					End If
				End If
				
			Elseif m_sNaviDirection = "End" Then 
				
				'navigate towards the end of the view
				
				If m_sNaviStartPos = "" Then
					'no start position defined, start from the end of the view
					Set vweDir = vwnavDir.GetLast
					m_sNaviDirection = "Begin"			'reverse direction
				Else
					'try to go to the given position
					Set vweDir = vwnavDir.GetPos(m_sNaviStartPos, ".")
					
					If vweDir Is Nothing Then
						'last pos was not found, start from the end
						Set vweDir = vwnavDir.GetLast
						m_sNaviDirection = "Begin"		'reverse direction
					Else
						'last pos found, m_sNaviStartPos represents the position of 
						'the previous navigation, skip this one
						Set vweDir = vwnavDir.GetNext(vweDir)
						
						If vweDir Is Nothing Then
							'if we skiped after the end, retrieve the topmost entries
							Set vweDir = vwnavDir.GetLast
							m_sNaviDirection = "Begin"	'reverse direction
						End If
					End If
				End If
			End If
			
			isCollection = False
			
			Gosub AddEntries
			
			'check if max result is not reached, if not append additional entries 
			If (m_sNaviDirection = "Begin") And (sLastPos &lt;&gt; "") And (iItemCount &lt; iMaxReturn) Then
				Set vweDir = vwnavDir.GetPos(sLastPos, ".")
				
				If Not vweDir Is Nothing Then
					Set vweDir = vwnavDir.GetNext(vweDir)
					m_sNaviDirection = "End"
					Gosub AddEntries
				End If
			End If
		End If
		
		
		'loop: all entries in the list which is holding the items we return
		'      create js array with all the items
		For iLiPos = iLiStart To iLiEnd
			
			'position 0 does not hold an entry
			If iLiPos &lt;&gt; 0 Then
				sLiPos = Cstr(iLiPos)
				Print _
				|	this.aDirList[| &amp; Cstr(iIdx) &amp; |] = | &amp; _
				|		["| &amp; liItems(sLiPos).sText	&amp; |", |&amp; _
				|	 	 "| &amp; liItems(sLiPos).sAlias	&amp; |"]
					this.aIconList[| &amp; Cstr(iIdx) &amp; |] = | &amp; liItems(sLiPos).sIcon
				
				iIdx = iIdx + 1
			End If
			
		Next
		
		Print _
		|	
				this.sFirstEntryPos	= '| + sFirstPos + |'
				this.sLastEntryPos	= '| + sLastPos + |'
				this.iSearchKeyFound = | + Cstr(iKeyFound) + |
		|
		
		Exit Sub
		
AddEntries:
		
		'loop: all items in the view until top, bottom or max is reached
		Do Until vweDir Is Nothing
			
			If sFirstPos = "" Then
				sFirstPos = vweDir.GetPosition(".")
			End If
			
			If sLastPos = "" Then
				sLastPos = vweDir.GetPosition(".")
			End If
			
			If m_sNaviDirection = "Begin" Then
				'to the top
				iLiStart	= iLiStart - 1
				iLiPos	= iLiStart
				sFirstPos = vweDir.GetPosition(".")
			Else
				'to the end
				iLiEnd	= iLiEnd + 1
				iLiPos	= iLiEnd
				sLastPos	= vweDir.GetPosition(".")
			End If
			
			'add entry to the list
			Set nmUser = New NotesName(Cstr(vweDir.ColumnValues(3)))
			
			vValue = vweDir.ColumnValues(1)
			If Isarray(vValue) Then vValue = vValue(0)	'can be an array or scalar result
			
			sLiPos = Cstr(iLiPos)
			
			liItems(sLiPos).sIcon	= Cstr(vweDir.ColumnValues(0))
			liItems(sLiPos).sText	= UtilEscapeJS(Cstr(vValue))
			
			If nmUser.Abbreviated = "" Then
				liItems(sLiPos).sAlias	= liItems(sLiPos).sText
			Else
				liItems(sLiPos).sAlias	= UtilEscapeJS(nmUser.Abbreviated)
			End If
			
			'navigate to the next entry
			If isCollection Then
				If m_sNaviDirection = "Begin" Then
					Set vweDir	= vwcolDir.GetPrevEntry(vweDir)
				Else					
					Set vweDir	= vwcolDir.GetNextEntry(vweDir)
				End If
			Else				
				If m_sNaviDirection = "Begin" Then
					Set vweDir	= vwnavDir.GetPrev(vweDir)
				Else					
					Set vweDir	= vwnavDir.GetNext(vweDir)
				End If
			End If
			
			'stop if max is reached
			iItemCount = iItemCount + 1
			If iItemCount &gt;= iMaxReturn Then
				Exit Do
			End If
		Loop
		
		Return
		
ERROR_HANDLER:
		
		'make sure we have valid js code
		Error Err, "&lt;e&gt;" &amp; Getthreadinfo(LSI_THREAD_PROC) &amp; " (" &amp; Cstr(Erl) &amp; ") " &amp; Error
		Exit Sub
		
	End Sub
	
End Class
</lotusscript></code><code event='initialize'><lotusscript>Sub Initialize
	
	Dim o As New cReadAddress("get")
	
End Sub</lotusscript></code>
<rundata processeddocs='0' exitcode='0'>
<agentmodified><datetime dst='true'>20030522T101350,64-04</datetime></agentmodified></rundata>
<item name='$POID'><datetime dst='true'>20130909T095407,54-04</datetime></item></agent>

