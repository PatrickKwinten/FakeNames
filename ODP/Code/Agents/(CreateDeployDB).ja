<?xml version='1.0' encoding='utf-8'?>
<agent name='(CreateDeployDB)' xmlns='http://www.lotus.com/dxl' version='9.0'
 maintenanceversion='1.5' replicaid='C1257E4300352F3F' hide='v3' publicaccess='false'
 designerversion='8.5.3' restrictions='unrestricted'>
<noteinfo noteid='896' unid='B04F8F2288BA266B852575D30001246E' sequence='61'>
<created><datetime dst='true'>20090611T201228,62-04</datetime></created>
<modified><datetime dst='true'>20150512T114104,00+02</datetime></modified>
<revised><datetime dst='true'>20130909T095408,84-04</datetime></revised>
<lastaccessed><datetime dst='true'>20150512T114104,00+02</datetime></lastaccessed>
<addedtofile><datetime dst='true'>20150512T114104,00+02</datetime></addedtofile></noteinfo>
<updatedby><name>CN=Lotus Notes Template Development/O=Lotus Notes</name></updatedby>
<revisions><datetime dst='true'>20110912T094721,43-04</datetime><datetime
 dst='true'>20120516T115244,84-04</datetime></revisions>
<wassignedby><name>CN=Lotus Notes Template Development/O=Lotus Notes</name></wassignedby>
<designchange><datetime dst='true'>20130909T095359,27-04</datetime></designchange>
<trigger type='agentlist'/>
<documentset type='selected'/><code event='action'><javaproject class='JavaAgent.class'
 codepath='c:\notes\data'><java name='JavaAgent.java'>import java.io.File;
import java.io.FileFilter;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.cert.CertificateException;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;
import java.util.Date;
import java.util.Vector;

import lotus.domino.ACL;
import lotus.domino.AgentBase;
import lotus.domino.AgentContext;
import lotus.domino.Database;
import lotus.domino.DateTime;
import lotus.domino.DbDirectory;
import lotus.domino.Document;
import lotus.domino.DocumentCollection;
import lotus.domino.Item;
import lotus.domino.NoteCollection;
import lotus.domino.NotesError;
import lotus.domino.NotesException;
import lotus.domino.Session;

public class JavaAgent extends AgentBase {

	public static final String LOCAL = "";
	public static final String DEPLOY = "deploy.nsf";
	public static final String EXTRAS_DIR = "extras";
	public static final String PERNAMES = "pernames.ntf";
	public static final String FORM = "Form";
	public static final String CROSS_CERTIFICATE = "CrossCertificate";
	public static final String CERTIFIER = "Certifier";
	public static final String CERTIFICATE_TYPE = "CertificateType";
	public static final String NOTES_CERT_TYPE = "0";
	public static final String INTERNET_CERT_TYPE = "1";
	public static final String JCEKS = "JCEKS";
	public static final char[] PW = "changeit".toCharArray();
	public static final String DEPLOY_TITLE = "Deploy DB";
	public static final String X509 = "X.509";
	public static final String WINLIN_KEYSTORE = ".keystore.JCEKS.IBM_J9_VM.install";
	public static final String MAC_KEYSTORE = ".keystore.JCEKS.Java_HotSpot(TM)_Client_VM.install";
	public static final String DEPLOY_PROFILE_NOTE = "deployProfileNote";
	public static final String TRUST_LINK_IDS = "$TrustLinkIds";
	public static final String TMP_DEPLOY_DB_DIR = "TempDeployDBDir";
	public static final String TMP_DEPLOY_DB_DELETES = "TempDeployDelete";
	public static final String TMP_ENABLE_NFL = "TempEnableNFL";
	public static final String FORCE_DELETES = "ForceDeletes";
	public static final String ENABLE_NFL = "EnableNFL";
	public static final String DT_LINKS_UPDATE = "$dtLinksUpdate";
	public static final String SERVER_COPY_MOD_TIME = "ServerCopyModTime";
	public static final String SERVER_COPY_UNID = "ServerCopyUnid";
	public static final String DEFAULT_ACL = "-Default-";
	public static final String CERTIFICATES_VIEW = "Certificates";
	public static final String CERTIFICATE_FILE_EXTENTION = ".cer";
	public static final String COMP_APP_FIELD = "$TITLE";
	public static final String COMP_APP_XML = "Notes Contacts Application.xml";
	public static final String TYPE = "Type";
	public static final String FD_TRUE = "1";
	public static final String FD_FALSE = "0";
	public static final String LS = System.getProperty("line.separator");

	private KeyStore macKeyStore;
	private KeyStore winKeyStore;
	private Vector uidList;
	private String directory;
	private String forceDeletes;
	private String enableNfl;
	private boolean certsCopied = false;
	private StringBuffer logBuffer;

	/**
	 * This agent is designed to be run by the Export Certificates to Deploy
	 * Database view action. This should not be run on its own, as it depends on
	 * a Notes.ini setting set by the view action. This agent creates the
	 * deploy.nsf database which contains a list of certificates that are added
	 * to the user's PNAB at install time. It also creates a Java keystore from
	 * a set of .cer files created by the view action.
	 */
	public void NotesMain() {

		logBuffer = new StringBuffer();
		try {
			
			
			Session session = getSession();

			// Get the Force Deletes setting from notes.ini
			forceDeletes = session.getEnvironmentString(TMP_DEPLOY_DB_DELETES);
			if (forceDeletes == null
					|| (!forceDeletes.equals(FD_FALSE) &amp;&amp; !forceDeletes.equals(FD_TRUE))) {
				forceDeletes = FD_FALSE;
				session.setEnvironmentVar(TMP_DEPLOY_DB_DELETES, LOCAL);
			}

			// Get the enableNfl setting from notes.ini
			enableNfl = session.getEnvironmentString(TMP_ENABLE_NFL);
			if (enableNfl == null
					|| (!enableNfl.equals(FD_FALSE) &amp;&amp; !enableNfl.equals(FD_TRUE))) {
				enableNfl = FD_FALSE;
				session.setEnvironmentVar(TMP_ENABLE_NFL, LOCAL);
			}			
			
			// Get the directory that contains the deploy.nsf and .keystore
			// files from notes.ini
			// If they do not exist, new ones will be created.
			directory = session.getEnvironmentString(TMP_DEPLOY_DB_DIR);
			if (directory == null || !(new File(directory)).canWrite()) {
				logBuffer.append("Working directory either does not exist or is not writeable." + LS);
				throw new NotesException(NotesError.NOTES_ERR_SYS_FILE_NOT_FOUND, logBuffer.toString());
			} else {
				session.setEnvironmentVar(TMP_DEPLOY_DB_DIR, LOCAL);
			}
			
			AgentContext agentContext = session.getAgentContext();

			DocumentCollection docs = agentContext.getUnprocessedDocuments();
			if(docs != null &amp;&amp; docs.getCount()==0) {
				logBuffer.append("No documents selected, or only categories selected." + LS);
				throw new NotesException(NotesError.NOTES_ERR_DOCUMENTCOLLECTION_MISSING, logBuffer.toString());
			}
			Document doc = null;
			String form = null;
			String certType = null;
			String type = null;

			// Ensure each document is a certifier or cross certificate
			// and if not delete them from the collection
			for (int i = 1; i &lt;= docs.getCount(); i++) {
				doc = docs.getNthDocument(i);
				form = doc.getItemValueString(FORM);
				certType = doc.getItemValueString(CERTIFICATE_TYPE);
				type = doc.getItemValueString(TYPE);

				if (certType != null &amp;&amp; type != null) {
					// Internet Cross Certificate
					if (form.equals(CROSS_CERTIFICATE)
							&amp;&amp; certType.equals(INTERNET_CERT_TYPE)
							&amp;&amp; type.equals(CROSS_CERTIFICATE)) {
						certsCopied = true;

						// Notes cross certificate
					} else if (form.equals(CROSS_CERTIFICATE)
							&amp;&amp; certType.equals(NOTES_CERT_TYPE)
							&amp;&amp; type.equals(CROSS_CERTIFICATE)) {
						certsCopied = true;

						// Internet Certifier
					} else if (form.equals(CERTIFIER)
							&amp;&amp; (certType.equals(INTERNET_CERT_TYPE) || certType.equals(NOTES_CERT_TYPE))
							&amp;&amp; type.equals(CERTIFIER)) {
						certsCopied = true;

					} else {
						docs.deleteDocument(doc);
						i--;
					}
				} else {
					docs.deleteDocument(doc);
					i--;
				}
			}

			// The docs document collection contains at least one valid document
			if (certsCopied) {

				// Get the existing deploy.nsf database, or create one if
				// it does not already exist
				DbDirectory localDbDirectory = session.getDbDirectory(LOCAL);
				Database deploy = null;
				boolean newDatabase = false;
				try {
					deploy = localDbDirectory.openDatabase(directory
							+ EXTRAS_DIR + File.separator + DEPLOY);
				} catch (NotesException ne) {
					// Deploy database does not exist, create it.
					newDatabase = true;
					Database pernames = localDbDirectory.openDatabase(PERNAMES,
							false);
					deploy = pernames.createFromTemplate(LOCAL, directory
							+ EXTRAS_DIR + File.separator + DEPLOY, false);
					deploy.setTitle(DEPLOY_TITLE);
					deploy.grantAccess(DEFAULT_ACL, ACL.LEVEL_READER);
				}

				if (newDatabase) {
					removeCompApp(deploy);
				}

				// Remove all certificates from the database
				deploy.getView(CERTIFICATES_VIEW).getAllEntries().removeAll(
						true);

				uidList = new Vector();
				
				for (int i = 1; i &lt;= docs.getCount(); i++) {
					if(docs.getNthDocument(i)!= null) {
						copyToDatabase(deploy, docs.getNthDocument(i));
					}
				}

				// Create a profile document that will contain a list
				// of unids for all the certificate documents, the time
				// the database was last updated and the force deletes setting
				Document profile = deploy.getProfileDocument(
						DEPLOY_PROFILE_NOTE, null);
				

				// Add the UNID of each document
				Item trustLinkIds = profile.replaceItemValue(TRUST_LINK_IDS,
						null);
				trustLinkIds.setValues(uidList);
				// Add today's time/date so we know when this was last modified.
				Item dateTimeItem = profile.replaceItemValue(DT_LINKS_UPDATE,
						null);
				dateTimeItem.setDateTimeValue(session
						.createDateTime(new Date()));
				// Add the forcedeletes value
				profile.replaceItemValue(FORCE_DELETES, (new Integer(forceDeletes)));
				profile.save(true);

				// Add the enableNfl value
				profile.replaceItemValue(ENABLE_NFL, (new Integer(enableNfl)));
				profile.save(true);
				
				// Create, or use the existing key stores
				macKeyStore = KeyStore.getInstance(JCEKS);
				winKeyStore = KeyStore.getInstance(JCEKS);
				String winFilePath = directory + WINLIN_KEYSTORE;
				String macFilePath = directory + MAC_KEYSTORE;
				File winKeyFile = new File(winFilePath);
				File macKeyFile = new File(macFilePath);
				if (macKeyFile.canWrite()) {
					FileInputStream macFips = new FileInputStream(macKeyFile);
					macKeyStore.load(macFips, PW);
					macFips.close();
				} else if(!macKeyFile.exists()) {
					macKeyStore.load(null, PW);
				} else {
					macKeyStore = null;
					logBuffer.append(MAC_KEYSTORE + " is read only or hidden and cannot be modified." + LS);
				}

				if (winKeyFile.canWrite()) {
					FileInputStream winFips = new FileInputStream(winKeyFile);
					winKeyStore.load(winFips, PW);
					winFips.close();
				} else if(!winKeyFile.exists()) {
					winKeyStore.load(null, PW);
				} else {
					winKeyStore = null;
					logBuffer.append(WINLIN_KEYSTORE + " is read only or hidden and cannot be modified." + LS);
				}
				
				// Add certificates to the keystores.
				addCertificatesToKeyStore();

				// Write the keystores to the target directory
				if (winKeyStore != null &amp;&amp; winKeyStore.size() &gt; 0) {
					try {
						FileOutputStream winFops = new FileOutputStream(winFilePath);
						winKeyStore.store(winFops, PW);
						winFops.close();
					} catch (FileNotFoundException ioe) {
						// bug in Java 5 that throws this exception on Windows if the file is hidden
						logBuffer.append(WINLIN_KEYSTORE + " is hidden and cannot be modified." + LS);
						ioe.printStackTrace();
					}
				}
				
				if (macKeyStore != null &amp;&amp; macKeyStore.size() &gt; 0) {
					try {
						FileOutputStream macFops = new FileOutputStream(macFilePath);
						macKeyStore.store(macFops, PW);
						macFops.close();
					} catch (FileNotFoundException ioe) {
						// bug in Java 5 that throws this exception on Windows if the file is hidden
						logBuffer.append(MAC_KEYSTORE + " is hidden and cannot be modified." + LS);
						ioe.printStackTrace();
					}
				}

			} else {
				// No valid certificates were selected in the view
				logBuffer.append("No valid certificates were selected.  Deploy.nsf and keystores not created or modified." + LS);
			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			System.err.println(logBuffer.toString());
		}
	}

	/**
	 * Copies the document to the deploy database. Adds the copied documents
	 * UNID to the list of UNIDS Writes the server copy UNID and Modified Date
	 * to the copied document.
	 * 
	 * @param database
	 *            The deploy database
	 * @param doc
	 *            The document to copy
	 * @throws NotesException
	 */
	private void copyToDatabase(Database database, Document doc)
			throws NotesException {
		String unid = doc.getUniversalID();
		DateTime date = doc.getLastModified();
		Document newDoc = doc.copyToDatabase(database);
		uidList.add(newDoc.getUniversalID());
		newDoc.replaceItemValue(SERVER_COPY_UNID, unid);
		newDoc.replaceItemValue(SERVER_COPY_MOD_TIME, date);
		newDoc.save();
	}

	/**
	 * Read all the .cer files from the target directory and add them to the Mac
	 * and Windows keystores.
	 * 
	 * @throws CertificateException
	 * @throws KeyStoreException
	 * @throws FileNotFoundException
	 * @throws IOException
	 * @throws NotesException
	 */
	private void addCertificatesToKeyStore() throws CertificateException,
			KeyStoreException, FileNotFoundException, IOException,
			NotesException {

		CertificateFactory certificateFactory = CertificateFactory.getInstance(X509);
		
		File tempDir = new File(directory);

		File[] listFiles = tempDir.listFiles(new FileFilter() {
			public boolean accept(File file) {
				if (file.getName().endsWith(CERTIFICATE_FILE_EXTENTION)) {
					return true;
				}
				return false;
			}
		});

		FileInputStream certInputStream = null;
		X509Certificate cert = null;
		String alias = null;
		for (int i = 0; i &lt; listFiles.length; i++) {
			try {
				certInputStream = new FileInputStream(listFiles[i]);
				cert = (X509Certificate) certificateFactory
						.generateCertificate(certInputStream);
				alias = cert.getIssuerDN().getName();
				if(alias.length() &gt; 11) {
					alias = alias.substring(0, 10);
				}
				alias = alias + System.currentTimeMillis();
				if (macKeyStore != null &amp;&amp; macKeyStore.getCertificateAlias(cert) == null) {
					macKeyStore.setCertificateEntry(alias, cert);
				}
				if (winKeyStore != null &amp;&amp; winKeyStore.getCertificateAlias(cert) == null) {
					winKeyStore.setCertificateEntry(alias, cert);
				}
			} catch (CertificateException ce) {
				logBuffer.append("Certificate temp file " + listFiles[i].getName() + " cannot be imported to Java keystore." + LS);
				ce.printStackTrace();
			}
			certInputStream.close();
			listFiles[i].delete();
		}
	}

	/**
	 * Since the deploy database is based on the same template as names.nsf,
	 * this can cause issues. Removing this design element makes the deploy
	 * database no longer a composite application.
	 * 
	 * @param db
	 *            Deploy Database
	 */
	private void removeCompApp(Database db) {
		try {
			NoteCollection nc = db.createNoteCollection(false);
			nc.setSelectMiscFormatElements(true);
			nc.buildCollection();
			String noteId = nc.getFirstNoteID();
			Document colDoc = null;
			while (noteId.length() &gt; 0) {
				colDoc = db.getDocumentByID(noteId);
				if (colDoc.getItemValueString(COMP_APP_FIELD).equals(
						COMP_APP_XML)) {
					colDoc.remove(true);
					break;
				}
				noteId = nc.getNextNoteID(noteId);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

}</java></javaproject></code>
<rundata processeddocs='0' exitcode='0'>
<agentmodified><datetime dst='true'>20120521T103418,97-04</datetime></agentmodified></rundata>
<item name='JavaCompilerSource' sign='true'><text>1.3</text></item>
<item name='JavaCompilerTarget' sign='true'><text>1.2</text></item>
<item name='$JavaCompilerSource' sign='true'><text>1.3</text></item>
<item name='$JavaCompilerTarget' sign='true'><text>1.2</text></item>
<item name='$POID'><datetime dst='true'>20130909T095408,84-04</datetime></item></agent>

