<?xml version='1.0' encoding='utf-8'?>
<agent name='(wReadData) ' alias=' wReadData' xmlns='http://www.lotus.com/dxl'
 version='9.0' maintenanceversion='1.5' replicaid='C1257E4300352F3F' hide='v3'
 runaswebuser='true' publicaccess='false' designerversion='6'>
<noteinfo noteid='212' unid='3991E0B1000805AFC1256B9D005CB908' sequence='5517'>
<created><datetime dst='true'>20020416T185246,80+02</datetime></created>
<modified><datetime dst='true'>20150512T114056,30+02</datetime></modified>
<revised><datetime dst='true'>20130909T095406,06-04</datetime></revised>
<lastaccessed><datetime dst='true'>20150512T114056,30+02</datetime></lastaccessed>
<addedtofile><datetime dst='true'>20150512T114056,30+02</datetime></addedtofile></noteinfo>
<updatedby><name>CN=Lotus Notes Template Development/O=Lotus Notes</name></updatedby>
<revisions><datetime dst='true'>20090514T140105,91-04</datetime><datetime
>20100304T143918,65-05</datetime></revisions>
<wassignedby><name>CN=Lotus Notes Template Development/O=Lotus Notes</name></wassignedby>
<designchange><datetime dst='true'>20130909T095356,86-04</datetime></designchange>
<trigger type='agentlist'/>
<documentset type='runonce'/><code event='options'><lotusscript>%REM

	run method:	as web user

%END REM

Option Public
Option Declare
Option Base 0

Use "WebLSClassTransfer"
</lotusscript></code><code event='declarations'><lotusscript>Const ERR_DBOpen 			= "Unable to open database '%s1'."
Const ERR_NO_SERVER_DELETE	= "Server documents cannot be deleted in this view."

Class cReadData As cTransfer
	
	'------
	Sub new(sType As String)
	'------
		
		On Error Goto ERROR_HANDLER
		
		Dim sRequestId	As String
		Dim ndbSrc	As NotesDatabase
		Dim isInJsFkt	As Boolean
		
		sRequestId = UtilGetQueryParameter(Me.m_sQueryString, "ReqId=")
		
		Print _
		|
			function getData() {			
		|
		
		isInJsFkt = True
		
		Select Case sRequestId
		Case "ArchiveTemplateList":		ArchiveTemplateList
		Case "ArchiveViewList":			ArchiveViewList
		Case "ArchiveCriteria":			ArchiveCriteria
		Case "ArchiveCriteriaModify":		ArchiveCriteriaModify
		Case "AtFormulaSyntaxCheck":		AtFormulaSyntaxCheck
		Case "DeleteR5WebConfiguration":	DeleteR5WebConfiguration
		Case "DeleteServerConfiguration":	DeleteServerConfiguration			
		Case "LDAPObjectClasses":		LDAPObjectClasses
		Case "LANDialupConnections":		LANDialupConnections
		Case "Policy":					Policy
		Case "ServerParameter":			ServerParameter
		Case "ServerPorts":				ServerPorts
		Case "MailInDb":		MailInDb
		End Select
		
		Print _
		|
			}
		|
		
		Exit Sub
		
ERROR_HANDLER:
		
		If isInJsFkt Then Print |}|
		
		m_sError = Getthreadinfo(LSI_THREAD_PROC) &amp; " (" &amp; Cstr(Erl) &amp; ") " &amp; Error
		Exit Sub
	End Sub
	
	'-----------------------------------------------
	Private Sub ArchiveCriteria
	'-----------------------------------------------
		
		On Error Goto ERROR_HANDLER
		
		Dim vw 		As NotesView
		Dim vwnav		As NotesViewNavigator
		Dim vweAC		As NotesViewEntry
		Dim docAC		As NotesDocument
		
		Dim sArchDocId	As String
		Dim sArchName	As String
		
		Print _
		|
			this.aDestList = []
			this.aOldCA 	= []
			var iIdx		= 0
		|
		
		sArchDocId = UtilGetQueryParameter(Me.m_sQueryString, "ArchiveDocId=")
		
		'get all archive criteria for current archive policy
		Set vw	= m_ndb.GetView("($ACPEmbedded)")
		Set vwnav = vw.CreateViewNavFromCategory(sArchDocId)
		Set vweAC = vwnav.GetFirst
		
		Do While Not vweAC Is Nothing
			
			sArchName = UtilEscapeJS(Cstr(vweAC.ColumnValues(1)))
			
			Print | 
					this.aDestList[iIdx]	= ['| &amp; sArchName &amp; |','| &amp; vweAC.UniversalID &amp; |']
					this.aOldCA[iIdx]		= ['| &amp; sArchName &amp; |','| &amp; vweAC.UniversalID &amp; |']
					iIdx++
				 |
			
			Set vweAC = vwnav.GetNext(vweAC)
		Loop
		
		'get all available archive criteria
		Print _
		|
			this.aSrcList	= []
			var iIdx		= 0
		|
		
		Set vw	= m_ndb.GetView("($ACPLookup)")
		Set vwnav = vw.CreateViewNav
		Set vweAC = vwnav.GetFirst
		
		Do While Not vweAC Is Nothing
			
			sArchName = UtilEscapeJS(Cstr(vweAC.ColumnValues(0)))
			
			Print |
					this.aSrcList[iIdx++] = ['| &amp; sArchName &amp; |','| &amp; vweAC.UniversalID &amp; |']
				 |
			
			Set vweAC = vwnav.GetNext(vweAC)
		Loop
		
		Exit Sub
		
ERROR_HANDLER:
		
		Error Err, "&lt;e&gt;" &amp; Getthreadinfo(LSI_THREAD_PROC) &amp; " (" &amp; Cstr(Erl) &amp; ") " &amp; Error
		Exit Sub		
	End Sub
	
	'-----------------------------------------------
	Private Sub ArchiveCriteriaModify
	'-----------------------------------------------
		
		On Error Goto ERROR_HANDLER
		
		Dim vwAC		As NotesView
		Dim docAC		As NotesDocument
		Dim itemUsedBy	As NotesItem
		Dim aNew		As Variant
		Dim aNewUNID	As Variant
		Dim aOld		As Variant
		Dim aModify	As Variant
		
		Dim sArchDocId	As String
		Dim vResult	As Variant
		
		Set vwAC = m_ndb.GetView("($ACPLookup)")
		
		sArchDocId = UtilGetQueryParameter(Me.m_sQueryString, "ArchiveDocId=")
		aNew		= Split(UtilUnescape(UtilGetQueryParameter(Me.m_sQueryString, "NewAC=")), "~")
		aNewUNID	= Split(UtilUnescape(UtilGetQueryParameter(Me.m_sQueryString, "NewACUNID=")), "~")
		aOld		= Split(UtilUnescape(UtilGetQueryParameter(Me.m_sQueryString, "OldAC=")), "~")
		
		'add new criteria
		aModify = Arrayreplace(aNew, aOld, "")
		
		'loop: all new archive criteria docs
		Forall sCriteria In aModify
			If sCriteria &lt;&gt; "" Then
				'get AC doc where we add the UNID of the archive doc
				Set docAC = vwAC.GetDocumentByKey(sCriteria)
				
				If Not docAC Is Nothing Then
					Set itemUsedBy=docAC.GetFirstItem("UsedBy")
					Call itemUsedBy.AppendToTextList(sArchDocId)
					Call docAC.Save(True, True)
				End If
			End If
		End Forall
		
		'remove old criteria
		aModify = Arrayreplace(aOld, aNew, "")
		
		'loop: all old archive criteria docs
		Forall sCriteria In aModify
			If sCriteria &lt;&gt; "" Then
				'get AC doc where we remove the UNID of the archive doc
				Set docAC = vwAC.GetDocumentByKey(sCriteria)
				Msgbox "remove: " &amp; sCriteria
				If Not docAC Is Nothing Then
					Set itemUsedBy = docAC.GetFirstItem("UsedBy")
					
					Dim itemTemp As New NotesItem(docAC,"tmpItem","")
					
					docAC.itemTemp	= docAC.UsedBy
					docAC.UsedBy	= ""
					
					Forall sDocUNID In itemTemp.Values()
						If sDocUNID &lt;&gt; sArchDocId Then
							Call itemUsedBy.AppendToTextList(sDocUNID)
						End If
					End Forall
					
					Call itemTemp.Remove		
					Call docAC.Save(True, True)
					
				End If
			End If
		End Forall
		
		'save new archive settings also in the archive policy doc, just for the case
		'if the user cancels the doc in the browser
		Set docAC = m_ndb.GetDocumentByUNID(sArchDocId)
		Call docAC.ReplaceItemValue("ACP", aNewUNID)
		Call docAC.Save(True, True)
		
		Exit Sub
		
ERROR_HANDLER:
		
		Error Err, "&lt;e&gt;" &amp; Getthreadinfo(LSI_THREAD_PROC) &amp; " (" &amp; Cstr(Erl) &amp; ") " &amp; Error
		Exit Sub		
	End Sub
	
	
	'-----------------------------------------------
	Private Sub ArchiveTemplateList
	'-----------------------------------------------
		
		On Error Goto ERROR_HANDLER
		
		Dim dbdir			As NotesDbDirectory
		Dim ndbDir		As NotesDatabase
		
		Dim sServerName	As String
		
		sServerName	= UtilUnescape(UtilGetQueryParameter(Me.m_sQueryString, "&amp;Server="))
		
		Set dbdir		= New NotesDbDirectory(sServerName)
		
		On Error 4072 Goto ERROR_CANNOT_OPEN_SERVER
		
		'loop: all templates on the given server
		Set ndbDir = dbdir.GetFirstDatabase(TEMPLATE)
		
		On Error Goto ERROR_HANDLER
		
		Print _
		|
			this.aTemplateList = []
				
				var aT	= this.aTemplateList
				var iIdx	= 0
				|
		
		While Not(ndbDir Is Nothing)
			
			Print | aT[iIdx++] = '| + UtilEscapeJS(Cstr(ndbDir.Title)) + |'
				|
			
			'get next database		
			Set ndbDir = dbdir.GetNextDatabase
		Wend
		
		Exit Sub
		
ERROR_CANNOT_OPEN_SERVER:
		
		'server couldn't be accessed (for whatever reason)
		Print _
		| 
			this.isCannotOpenServer = True
			this.sServerRequested	= '| &amp; UtilEscapeJS(sServerName) &amp; |'
		|
		
		Exit Sub
		
ERROR_HANDLER:
		
		Error Err, "&lt;e&gt;" &amp; Getthreadinfo(LSI_THREAD_PROC) &amp; " (" &amp; Cstr(Erl) &amp; ") " &amp; Error
		Exit Sub		
	End Sub
	
	'-----------------------------------------------
	Private Sub ArchiveViewList
	'-----------------------------------------------
		
		On Error Goto ERROR_HANDLER
		
		Dim dbdir			As NotesDbDirectory
		Dim ndbDir		As NotesDatabase
		
		Dim sServerName	As String
		Dim sTemplTitle	As String
		Dim sViewName		As String
		
		sServerName	= UtilUnescape(UtilGetQueryParameter(Me.m_sQueryString, "&amp;Server="))
		sTemplTitle	= UtilUnescape(UtilGetQueryParameter(Me.m_sQueryString, "&amp;Template="))
		
		Set dbdir		= New NotesDbDirectory(sServerName)
		
		On Error 4072 Goto ERROR_CANNOT_OPEN_SERVER
		
		'loop: all templates on the given server - search for the database
		Set ndbDir = dbdir.GetFirstDatabase(TEMPLATE)
		
		On Error Goto ERROR_HANDLER
		
		Do While Not(ndbDir Is Nothing)
			
			If ndbDir.Title = sTemplTitle Then
				Exit Do
			End If
			
			'get next database		
			Set ndbDir = dbdir.GetNextDatabase
		Loop
		
		If ndbDir Is Nothing Then Goto ERROR_CANNOT_OPEN_SERVER
		
		On Error Goto ERROR_CANNOT_OPEN_DATABASE
		
		If ndbdir.Open("", "") = False Goto ERROR_CANNOT_OPEN_SERVER
		
		On Error Goto ERROR_HANDLER
		
		Print _
		|
			this.aViewList = []
				
				var aV	= this.aViewList
				var iIdx	= 0
				|
		
		'put the views into a js array
		Forall vw In ndbDir.Views
			
			sViewName = ""
			
			If Not vw.IsPrivate Then
				Select Case vw.Name
				Case |($Inbox)|:			sViewName = "Inbox | ($Inbox)"
				Case |($Drafts)|:			sViewName = "Drafts | ($Drafts)"
				Case |($Sent)|:			sViewName = "Sent | ($Sent)"
				Case |($All)|:				sViewName = "All Documents | ($All)"
				Case |($Calendar)|:			sViewName = "Calendar | ($Calendar)"
				Case |($Meetings)|:			sViewName = "Meetings | ($Meetings)"
				Case |(To do's\By Category)|:	sViewName = "To Do | (To do's\By Category)"
				Case |($Trash)|:			sViewName = "Trash | ($Trash)"
				Case Else
					If Left$(vw.Name, 1) &lt;&gt; "(" Then
						sViewName = vw.Name
					End If
				End Select	
			End If
			
			If sViewName &lt;&gt; "" Then
				Print | aV[iIdx++] = '| + UtilEscapeJS(sViewName) + |'
					 |
			End If
		End Forall
		
		Exit Sub
		
ERROR_CANNOT_OPEN_DATABASE:
		Msgbox Error
		Print _
		| 
			this.isCannotOpenDatabase = true
			this.sDbError = '| &amp; UtilEscapeJS(Error) &amp; |'
		|
		
		Exit Sub
		
ERROR_CANNOT_OPEN_SERVER:
		
		Print _
		| 
			this.isCannotOpenServer = true
		|
		
		Exit Sub
		
ERROR_HANDLER:
		
		Error Err, "&lt;e&gt;" &amp; Getthreadinfo(LSI_THREAD_PROC) &amp; " (" &amp; Cstr(Erl) &amp; ") " &amp; Error &amp; Err
		Exit Sub		
	End Sub
	
	
	'-----------------------------------------------
	Private Sub AtFormulaSyntaxCheck
	'-----------------------------------------------
		
		On Error Goto ERROR_HANDLER
		
		Dim docTemp	As NotesDocument
		Dim sFormula	As String
		Dim sLine		As String
		Dim vResult	As Variant
		
		Set docTemp = m_ndb.CreateDocument
		
		sFormula	= UtilUnescape(UtilGetQueryParameter(Me.m_sQueryString, "Formula="))
		
		Call docTemp.ReplaceItemValue("tFormula", sFormula)
		
		vResult = Evaluate(|@CheckFormulaSyntax(tFormula)|, docTemp)
		
		If vResult(0) &lt;&gt; "1" Then
			sLine = vResult(1)
		End If
		
		Print _
		|	
			this.sError	= '| &amp; Cstr(vResult(0)) &amp; |';
			this.sLine	= '| &amp; sLine &amp; |';
		|
		
		
		Exit Sub
		
ERROR_HANDLER:
		
		Error Err, "&lt;e&gt;" &amp; Getthreadinfo(LSI_THREAD_PROC) &amp; " (" &amp; Cstr(Erl) &amp; ") " &amp; Error
		Exit Sub		
	End Sub
	
	
	'-----------------------------------------------
	Private Sub DeleteR5WebConfiguration
	'-----------------------------------------------
		
		On Error Goto ERROR_HANDLER
		
		Dim docConfig		As NotesDocument
		Dim aConfigUNID	As Variant
		Dim isServerDoc	As Boolean
		
		'get all selected web config doc unid's
		aConfigUNID = Split(UtilGetQueryParameter(Me.m_sQueryString, "UNID="), "~")
		
		'loop: all selected config documents
		Forall sConfigUNID In aConfigUNID
			
			'get config doc
			Set docConfig = m_ndb.GetDocumentByUNID(sConfigUNID)
			
			If Not docConfig Is Nothing Then
				
				'we delete only config documents, no server documents
				
				If docConfig.Type(0) = "Server" Then
					isServerDoc = True
				Else
					Call docConfig.Remove(True)
				End If
				
			End If
			
		End Forall
		
		If isServerDoc Then
			Print _
			|
				alert('| &amp; ERR_NO_SERVER_DELETE &amp; |')
			|
		End If
		
		Exit Sub
		
ERROR_HANDLER:
		
		Error Err, "&lt;e&gt;" &amp; Getthreadinfo(LSI_THREAD_PROC) &amp; " (" &amp; Cstr(Erl) &amp; ") " &amp; Error
		Exit Sub		
	End Sub
	
	
	'-----------------------------------------------
	Private Sub DeleteServerConfiguration
	'-----------------------------------------------
		
		On Error Goto ERROR_HANDLER
		
		Dim vwRules		As NotesView
		Dim vwecRules		As NotesViewEntryCollection
		Dim docConfig		As NotesDocument
		Dim aConfigUNID	As Variant
		
		'get all selected server config doc unid's
		aConfigUNID = Split(UtilGetQueryParameter(Me.m_sQueryString, "UNID="), "~")
		
		Set vwRules = m_ndb.GetView("Rules")
		
		'loop: all selected config documents
		Forall sConfigUNID In aConfigUNID
			
			'get config doc
			Set docConfig = m_ndb.GetDocumentByUNID(sConfigUNID)
			
			If Not docConfig Is Nothing Then
				
				'delete all rules which belong to the config doc
				Set vwecRules = vwRules.GetAllEntriesByKey(docConfig.CfgDocUNID, True)
				Call vwecRules.RemoveAll(True)
				
				'remove config doc
				Call docConfig.Remove(True)
				
			End If
			
		End Forall
		
		Exit Sub
		
ERROR_HANDLER:
		
		Error Err, "&lt;e&gt;" &amp; Getthreadinfo(LSI_THREAD_PROC) &amp; " (" &amp; Cstr(Erl) &amp; ") " &amp; Error
		Exit Sub		
	End Sub
	
	
	'-----------------------------------------------
	Private Sub LANDialupConnections
	'-----------------------------------------------
		
		On Error Goto ERROR_HANDLER
		
		Dim vw 		As NotesView
		Dim vwec		As NotesViewEntryCollection
		Dim vwe		As NotesViewEntry
		Dim nmServer	As NotesName
		Dim isFirst	As Boolean
		Dim isInArray	As Boolean
		
		Set vw		= m_ndb.GetView("($Connections)")
		
		Set nmServer	= New NotesName(UtilUnescape(UtilGetQueryParameter(Me.m_sQueryString, "&amp;SrcServerName=")))
		
		'get all connections for the server
		Set vwec = vw.GetAllEntriesByKey(nmServer.Canonical, True)
		Set vwe = vwec.GetFirstEntry
		
		Print _
		|
			this.aSrcList = [
		|
		
		isInArray = True
		isFirst	= True
		
		Do While Not vwe Is Nothing
			
			'return only LAN dialup connections
			If Cstr(vwe.ColumnValues(27)) = "5" Then
				
				If isFirst Then
					isFirst = False
				Else
					Print |,|
				End If
				
				Print |'| &amp; UtilEscapeJS(Cstr(vwe.ColumnValues(2))) + |'|
				
			End If
			
			Set vwe = vwec.GetNextEntry(vwe)
		Loop
		
		Print _
		|
			]
		|
		
		Exit Sub
		
ERROR_HANDLER:
		If isInArray Then Print |]|
		
		Error Err, "&lt;e&gt;" &amp; Getthreadinfo(LSI_THREAD_PROC) &amp; " (" &amp; Cstr(Erl) &amp; ") " &amp; Error
		Exit Sub		
	End Sub
	
	
	'-----------------------------------------------
	Private Sub LDAPObjectClasses
	'-----------------------------------------------
		
		On Error Goto ERROR_HANDLER
		
		Dim ndbLDAP	As NotesDatabase
		Dim vw 		As NotesView
		Dim vwnav		As NotesViewNavigator
		Dim vwe		As NotesViewEntry
		
		Dim isInArray	As Boolean
		
		Set ndbLDAP	= OpenDatabase(SYSDB_SCHEMA)
		Set vw		= ndbLDAP.GetView("LDAPATNamePickList")	'all attributes
		
		'print all LDAP attributes into HTML stream
		Print _
		|
			var iIdx = 0
			this.aClasses = []

			this.aClasses[iIdx++] = ['*', null, 
		|
		
		isInArray = True
		
		Call UtilPrintViewColumnIntoJSArray(vw, 0)
		
		Print |]|
		
		isInArray = False
		
		'print all LDAP classes with all their attributes into HTML stream
		Set vw	= ndbLDAp.GetView("LDAPOCNamePickList")	'all classes
		Set vwnav = vw.CreateViewNav()
		Set vwe	= vwnav.GetFirst
		
		While Not vwe Is Nothing
			
			isInArray = True
			
			Print _
			|
			this.aClasses[iIdx++] = [
			'| &amp; UtilEscapeJS(Cstr(vwe.ColumnValues(0))) &amp; |', null,| &amp; Chr(13) &amp; Chr(10)
			
			Call UtilPrintLSContainerInToJSArray(vwe.ColumnValues(1), True)
			
			Print |]|
			
			isInArray = False
			
			Set vwe = vwnav.GetNext(vwe)
		Wend
		
		Exit Sub
		
ERROR_HANDLER:
		
		If isInArray Then Print |]|
		
		Error Err, "&lt;e&gt;" &amp; Getthreadinfo(LSI_THREAD_PROC) &amp; " (" &amp; Cstr(Erl) &amp; ") " &amp; Error
		Exit Sub		
	End Sub
	
	
	'-----------------------------------------------
	Private Sub Policy
	'-----------------------------------------------
		
		On Error Goto ERROR_HANDLER
		
		Dim vw 		As NotesView
		
		Set vw		= m_ndb.GetView("($PoliciesExplicit)")
		
		Print _
		|
			this.aSrcList = 
		|
		
		Call UtilPrintViewColumnIntoJSArray(vw, 0)
		
		Exit Sub
		
ERROR_HANDLER:
		
		Error Err, "&lt;e&gt;" &amp; Getthreadinfo(LSI_THREAD_PROC) &amp; " (" &amp; Cstr(Erl) &amp; ") " &amp; Error
		Exit Sub		
	End Sub
	
	
	'-----------------------------------------------
	Private Sub ServerParameter
	'-----------------------------------------------
		
		On Error Goto ERROR_HANDLER
		
		Dim vw 		As NotesView
		Dim vwnav		As NotesViewNavigator
		Dim vwe		As NotesViewEntry
		
		Set vw	= m_ndb.GetView("($ServerParameters)")	'all attributes
		Set vwnav = vw.CreateViewNav()
		
		On Error Resume Next
		Set vwe	= vwnav.GetFirst
		On Error Goto ERROR_HANDLER
		
		'print all server parameter into HTML stream
		Print _
		|
			var iIdx = 0
			this.aAllParams = []
		|
		
		
		While Not vwe Is Nothing
			
			Print _
			|	this.aAllParams[iIdx++] = 	[| &amp; _
			|'| &amp; UtilEscapeJS(Cstr(vwe.ColumnValues(0))) &amp; |', | &amp; _
			|'| &amp; UtilEscapeJS(Cstr(vwe.ColumnValues(0))) &amp; |', | &amp; _
			|'| &amp; UtilEscapeJS(Cstr(vwe.ColumnValues(1))) &amp; |', | &amp; _
			|'| &amp; UtilEscapeJS(Cstr(vwe.ColumnValues(2))) &amp; |']
			|
			
			
			'next parameter
			Set vwe = vwnav.GetNext(vwe)
		Wend
		
		Exit Sub
		
ERROR_HANDLER:
		
		Error Err, "&lt;e&gt;" &amp; Getthreadinfo(LSI_THREAD_PROC) &amp; " (" &amp; Cstr(Erl) &amp; ") " &amp; Error
		Exit Sub		
	End Sub
	
	
	'-----------------------------------------------
	Private Sub ServerPorts
	'-----------------------------------------------
		
		On Error Goto ERROR_HANDLER
		
		Dim vw 		As NotesView
		Dim nmServer	As NotesName
		Dim docServer	As NotesDocument
		
		Set vw		= m_ndb.GetView("($Servers)")
		
		'get ports for the source server
		Set nmServer	= New NotesName(UtilGetQueryParameter(Me.m_sQueryString, "SrcServerName="))
		Set docServer 	= vw.GetDocumentByKey(nmServer.Canonical, True)
		
		If docServer Is Nothing Then
			Print | this.aSrcList = []|
		Else
			Print | this.aSrcList = |
			Call UtilPrintLSContainerInToJSArray(docServer.Ports, True)
		End If
		
		Exit Sub
		
ERROR_HANDLER:
		
		Error Err, "&lt;e&gt;" &amp; Getthreadinfo(LSI_THREAD_PROC) &amp; " (" &amp; Cstr(Erl) &amp; ") " &amp; Error
		Exit Sub		
	End Sub
	
	'-----------------------------------------------
	Private Sub MailInDb
	'-----------------------------------------------
		
		On Error Goto ERROR_HANDLER
		
		Dim vw 		As NotesView
		Set vw		= m_ndb.GetView("Mail-In Databases")
		
		Dim cat 	As String
		cat			= UtilGetMailInDbString(vw)
		
		
		Print _
		|
			this.aSrcList = 
		|
		
		Call UtilPrintCatViewColumnIntoJSArray(vw, 3, cat)
		
		Exit Sub
		
ERROR_HANDLER:
		
		Error Err, "&lt;e&gt;" &amp; Getthreadinfo(LSI_THREAD_PROC) &amp; " (" &amp; Cstr(Erl) &amp; ") " &amp; Error
		Exit Sub		
	End Sub
	
	'----------------------------
	Private Function OpenDatabase(sDbAlias As String) As NotesDatabase
	'----------------------------
		
		Set OpenDatabase = UtilOpenSysDb(sDbAlias)
		
		If OpenDatabase Is Nothing Then
			Error 1, UtilSprintf(ERR_DBOPEN, sDbAlias, "")
		End If
		
	End Function
	
End Class
</lotusscript></code><code event='initialize'><lotusscript>Sub Initialize
	Dim o As New cReadData("get")
End Sub
</lotusscript></code><code event='terminate'><lotusscript>Sub Terminate
	
End Sub</lotusscript></code>
<rundata processeddocs='0' exitcode='0'>
<agentmodified><datetime>20021211T140118,64-05</datetime></agentmodified></rundata>
<item name='$POID'><datetime dst='true'>20130909T095406,06-04</datetime></item></agent>

